% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/loopingRule.R
\name{loopingRule}
\alias{foreachBatchLoop}
\alias{foreachLoop}
\alias{loopingRule}
\alias{parLapplyBatchLoop}
\alias{parLapplyLBLoop}
\alias{parLapplyLoop}
\title{parallel looping functions}
\usage{
parLapplyBatchLoop(loopList, executeFunction, ..., cl, batchSize = 3,
  mc.cores = getOption("mc.cores", 1L), shuffle = TRUE)

parLapplyLoop(loopList, executeFunction, ..., cl, shuffle = TRUE)

parLapplyLBLoop(loopList, executeFunction, ..., cl)

foreachBatchLoop(loopList, executeFunction, ..., batchSize = 3,
  mc.cores = getOption("mc.cores", 1L), shuffle = TRUE)

foreachLoop(loopList, executeFunction, ...)
}
\arguments{
\item{loopList}{An internal model list to execute over}

\item{executeFunction}{An internal task execution function}

\item{...}{Other parameter to pass to \code{executeFunction}. Must be left in a loopingRue}

\item{cl}{A SNOW cluster as decribed in \code{parallel::parLapplyLoop}}

\item{batchSize}{Number of models to send to a cluster or core at a time}

\item{mc.cores}{Number of cores or CPUs to use in each compute node}

\item{shuffle}{Should loopList be shuffle before depatch to different compute nodes. Shuffle the loopList
gives a more balanced batch load}
}
\description{
parallel looping functions, usually called by \code{\link{modifyFunction}} to pass parameter, for example \code{cl} in parLapplyLoop
}
\details{
A looping rule is a \code{lapply} like function, whose first two arguments are a list and a function respectively,
with \code{...} available for further argument passed to the function. The order of the first two arguments matters while names do not.
Its return value must be a list. Therefore, \code{bas::lapply}, \code{parallel::mclapply}, \code{parallel::parLapply},
\code{parallel::parLapplyLB} are all valide looping rule. \code{parLapplyBatchLoop}, \code{foreachBatchLoop} here are usually used with openMPI,
and send its jobs by batches, with batchSize = 3 as default. One can also execute jobs (<=batchSize) in a node with multiple cores,
by setting \code{mc.cores} > 1. But since only at more \code{batchSize} jobs running on a node at a time, \code{mc.cores} must be less
or equal to \code{batchSize}. It is usually disencouraged to use many cores in a single node in openMPI jobs, as it may crash a node (heavy load).
To use 2 cores on one node, one can use the \code{\link{modifyFunction}}, like \code{modifyFunction(foreachLoop, mc.cores = 2L)}.

The default looping rule is the foreachLoop, which sends one job to one node or core at a time and execute the next one if one registered node
or core is available. If no backend registered, \code{foreachBatchLoop} and \code{foreachLoop} execute jobs sequentially.
}

